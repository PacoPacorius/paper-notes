=== Notes on ARM's MTE ===

Introduction
* MTE tries to detect spatial and temporal memory violations. 

Threat Model
* MTE tries to subvert malicious data only.
* In dynamically linked systems, legacy code doesn't need recompilation
* MTE assumes stack pointer is trustworthy. Application to the stack requires
    recompilation.

Memory Safety
* 4 bits of data for every 16 bytes. Pointers (virtual addresses) are the 
key to the lock. 
* Sequential allocations have different tags, but eventually a tag is going
to be repeated.

Architectural Details
* Tag in the top byte of the address register is compared with the tag 
stored in memory.
* Exception can be both synchronous and asynchronous. 
    - Synchrounous tag fault exceptions can exactly pinpoint which load/store 
    instruction caused the exception. This requires higher overhead.
    To be used in pre-release testing to sort out any issues, will
    accumulate data on tag mismatches.
    - Asynchronous tag fault exceptions can pinpoint which thread caused 
    exception (less accurate) but incurs less overhead. To be used 
    after release. Tag mismatches terminates process.

Deployment in both HW and SW
* Modifications are required in OS Kernel and C libraries for heap tagging 
    in dynamically-linked systems.
* Stack support requires extra recompilation. 
* In either case, no source code modification is required.


=== Summary ===
Essentially more of a hybrid hardware-software solution?
